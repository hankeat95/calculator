{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentOperation","setCurrentOperation","value1","setValue1","value2","setValue2","historyValue1","setHistoryValue1","historyValue2","setHistoryValue2","historyOperation","setHistoryOperation","useEffect","isOverflow","document","getElementsByClassName","style","fontSize","originalTextDisplayWidth","clientWidth","currentTextDisplayWidth","scrollWidth","currentFontSize","parseFloat","window","getComputedStyle","getPropertyValue","handleDigitClick","digit","digitInString","toString","prevValue","handleOperationChange","operation","endsWith","substring","length","handleCalculate","result","includes","toFixed","handleClearAll","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":"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","file":"static/js/main.0b8a6fe4.chunk.js","sourcesContent":["import './App.scss';\nimport BackspaceIcon from '@mui/icons-material/Backspace';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [currentOperation, setCurrentOperation] = useState('')\n  const [value1, setValue1] = useState('0')\n  const [value2, setValue2] = useState('')\n  const [historyValue1, setHistoryValue1] = useState('')\n  const [historyValue2, setHistoryValue2] = useState('')\n  const [historyOperation, setHistoryOperation] = useState('')\n\n  useEffect(() => {\n    let isOverflow;\n\n    document.getElementsByClassName('textDisplay')[0].style.fontSize = \"64px\";\n    do {\n      let originalTextDisplayWidth = document.getElementsByClassName('textDisplay')[0].clientWidth\n      let currentTextDisplayWidth = document.getElementsByClassName('textDisplay')[0].scrollWidth;\n      let currentFontSize = parseFloat(window.getComputedStyle(document.getElementsByClassName('textDisplay')[0], null).getPropertyValue('font-size'));\n      isOverflow = currentTextDisplayWidth - originalTextDisplayWidth > 0;\n      if (isOverflow) {\n        document.getElementsByClassName('textDisplay')[0].style.fontSize = (currentFontSize - 1) + \"px\";\n      }\n    }\n    while (isOverflow);\n  }, [value1, value2, currentOperation])\n\n  const handleDecimalClick = () => {\n    if (currentOperation && !value2) {\n      setValue2(\"0.\")\n    }\n    if (value1 && !value1.includes(\".\")) {\n      setValue1((prevValue) => prevValue + \".\")\n    }\n    if (value2 && !value2.includes(\".\")) {\n      setValue2((prevValue) => prevValue + \".\")\n    }\n  }\n\n  const handleDigitClick = (digit) => {\n    if (digit === 0 ) return;\n    // if (digit === 0 ) return;\n    // if (value1 === '0')\n    //   setValue1('');\n    let digitInString = digit.toString();\n    if (!currentOperation && (historyValue1 || historyValue2 || historyOperation)) {\n      setValue1(digitInString);\n      setHistoryValue1('');\n      setHistoryValue2('');\n      setHistoryOperation('');\n      return;\n    }\n\n    if (!currentOperation) {\n      setValue1((prevValue) => prevValue && prevValue !== \"0\" ? prevValue + digitInString : digitInString)\n      return;\n    }\n    setValue2((prevValue) => prevValue && prevValue !== \"0\" ? prevValue + digitInString : digitInString)\n  }\n\n  const handlePercentageClick = () => {\n    if (!value1) return;\n    if (value1 === \"0\") return;\n    let result = parseFloat(value1) / 100;\n    setHistoryValue1(value1);\n    setHistoryValue2(100);\n    setHistoryOperation('÷');\n    setValue1(result.toString());\n    setValue2('');\n    setCurrentOperation('');\n  }\n\n\n  const handleOperationChange = (operation) => {\n    if (!value1) return;\n    // if (value1 === \"0\") return;\n    if (value1.endsWith(\".\")) {\n      setValue1((prevValue) => prevValue.substring(0, prevValue.length - 1))\n    }\n    if (value2) {\n      handleCalculate();\n    }\n    setCurrentOperation(operation);\n  }\n\n  const handleCalculate = () => {\n    let result = '';\n    if (value1 && value2 && currentOperation) {\n      switch (currentOperation) {\n        case '+':\n          result = parseFloat(value1) + parseFloat(value2);\n          break;\n        case '-':\n          setCurrentOperation(\"-\")\n          result = parseFloat(value1) - parseFloat(value2);\n          break;\n        case '×':\n          setCurrentOperation(\"×\")\n          result = parseFloat(value1) * parseFloat(value2);\n          break;\n        case '÷':\n          setCurrentOperation(\"÷\")\n          result = parseFloat(value1) / parseFloat(value2);\n          break;\n        default:\n          break;\n      }\n      result = result.toString().includes(\".\") ? result.toFixed(5) : result;\n      setHistoryValue1(value1);\n      setHistoryValue2(value2);\n      setHistoryOperation(currentOperation);\n      setValue1(result.toString());\n      setValue2('');\n      setCurrentOperation('');\n    }\n  }\n\n  const handleBackspace = () => {\n    if (value1.length === 0 || value1.length === 1) {\n      setValue1('0')\n      return;\n    }\n    if (historyOperation || historyValue1 || historyValue2)\n      handleClearAll();\n    if (currentOperation && value2) {\n      setValue2((prevValue) => prevValue.substring(0, prevValue.length - 1))\n      return;\n    }\n    if (currentOperation) {\n      setCurrentOperation('');\n      return;\n    }\n    if (!currentOperation && value1) {\n      setValue1((prevValue) => prevValue.substring(0, prevValue.length - 1))\n      return;\n    }\n\n\n  }\n\n  const handleClearAll = () => {\n    setValue1('0');\n    setValue2('');\n    setCurrentOperation('');\n    setHistoryValue1('');\n    setHistoryValue2('');\n    setHistoryOperation('');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span>The Calculator</span>\n      </header>\n      <div className='App-content'>\n        <div className='calculatorContainer'>\n          <div className='historyText'>\n            <span className='firstValueText'>{historyValue1}</span>\n            <span className='operationText'>{historyOperation}</span>\n            <span className='secondValueText'>{historyValue2}</span>\n          </div>\n          <div className='textDisplay'>{value1} {currentOperation} {value2}</div>\n          <div className='buttonsDiv'>\n            <button onClick={handleClearAll} className='secondaryButtons'>AC</button>\n            <button onClick={handleBackspace} className='secondaryButtons'><BackspaceIcon /></button>\n            <button onClick={handlePercentageClick} className='secondaryButtons'>%</button>\n            <button onClick={() => handleOperationChange(\"÷\")} className='actionButtons'>÷</button>\n\n            <button onClick={() => handleDigitClick(7)}>7</button>\n            <button onClick={() => handleDigitClick(8)}>8</button>\n            <button onClick={() => handleDigitClick(9)}>9</button>\n            <button onClick={() => handleOperationChange(\"×\")} className='actionButtons'>×</button>\n\n            <button onClick={() => handleDigitClick(4)}>4</button>\n            <button onClick={() => handleDigitClick(5)}>5</button>\n            <button onClick={() => handleDigitClick(6)}>6</button>\n            <button onClick={() => handleOperationChange(\"-\")} className='actionButtons'>-</button>\n\n            <button onClick={() => handleDigitClick(1)}>1</button>\n            <button onClick={() => handleDigitClick(2)}>2</button>\n            <button onClick={() => handleDigitClick(3)}>3</button>\n            <button onClick={() => handleOperationChange(\"+\")} className='actionButtons'>+</button>\n\n            <button onClick={() => handleDigitClick(0)}>0</button>\n            <button onClick={handleDecimalClick}>.</button>\n            <button onClick={handleCalculate} className='equalSign'>=</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}